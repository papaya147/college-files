# Update plot when action button is clicked
observeEvent(input$generate, {
output$scatterPlot <- renderPlot({
generate_data(input$num_points) %>%
ggplot(aes(x = x, y = y)) +
geom_point() +
labs(title = "Random Scatter Plot", x = "X-axis", y = "Y-axis")
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("ggplot2")
install.packages("magrittr")
library(shiny)
library(ggplot2)
library(magrittr)
ui <- fluidPage(
titlePanel("21BDS0340"),
sidebarLayout(
sidebarPanel(
sliderInput("num_points", "Number of Points:", min = 10, max = 100, value = 50),
actionButton("generate", "Generate Plot")
),
mainPanel(
plotOutput("scatterPlot")
)
)
)
server <- function(input, output) {
generate_data <- function(num_points) {
data.frame(
x = rnorm(num_points),
y = rnorm(num_points)
)
}
output$scatterPlot <- renderPlot({
generate_data(input$num_points) %>%
ggplot(aes(x = x, y = y)) +
geom_point() +
labs(title = "Random Scatter Plot", x = "X axis", y = "Y axis")
})
observeEvent(input$generate, {
output$scatterPlot <- renderPlot({
generate_data(input$num_points) %>%
ggplot(aes(x = x, y = y)) +
geom_point() +
labs(title = "Random Scatter Plot", x = "X axis", y = "Y axis")
})
})
}
shinyApp(ui = ui, server = server)
library(maps)
library(ggplot2)
india <- map_data("world", region = "india")
ggplot() +
geom_polygon(data = india, aes(x = long, y = lat, group = group),
color = "black", fill = "lightblue") +
coord_fixed(1.3) +
labs(title = "Map of India") +
theme_void()
midwest
library(ggplot2)
midwest
ggplot(midwest, aes(x = state, y = poptotal)) + geom_point()
ggplot(midwest, aes(x = state, y = poptotal)) + geom_col()
ggplot(midwest, aes(x = percollege, y = percadultpoverty))
ggplot(midwest, aes(x = percollege, y = percadultpoverty)) +
geom_point()
ggplot(midwest, aes(x = percollege, y = percadultpoverty)) +
geom_point() +
geom_smooth()
ggplot(midwest, aes(x = percollege, y = percadultpoverty)) +
geom_point() +
geom_smooth() +
geom_point(mapping = aes(y = percchildbelowpoverty))
midwest
ggplot(midwest, aes(x = percollege, y = percadultpoverty)) +
geom_point() +
geom_smooth() +
geom_point(mapping = aes(y = percchildbelowpovert))
ggplot(midwest, aes(x = percollege, y = percadultpoverty)) +
geom_point() +
geom_smooth() +
facet_wrap(~state)
ggplot(midwest, aes(x = percollege, y = percadultpoverty)) +
geom_point() +
geom_smooth() +
facet_grid(~state)
ggplot(midwest, aes(x = percollege, y = percadultpoverty)) +
geom_point() +
geom_smooth() +
facet_wrap(popdensity~state)
= 5
# branching with if
x = 5
if (x == 5) {
print("x is greater than 5")
}
# branching with if... else
x = 2
if (x > 3) {
print("x is greater than 3")
} else {
print("x is less than or equal to 3")
}
# branching with if... else if... else
x = 3
if (x > 3) {
print("x is greater than 3")
} else if (x < 3) {
print("x is less than 3")
} else {
print("x is equal to 3")
}
# looping with range
for (i in 1:5) {
print(i)
}
print(name)
# looping through elements
names = c("abhinav", "tanush", "dinesh", "sumathi")
for (name in names) {
print(name)
}
# while loop
x = 0
while (x < 5) {
print(x)
x = x + 1
}
# repeat loop
x = 1
repeat {
print(x)
if (x >= 5) {
break
}
x = x + 1
}
# branching and looping combo
for (x in 0:10) {
if (x % 2 == 0) {
# branching and looping combo
for (x in 0:10) {
if (x %% 2 == 0) {
paste(x, " is even")
} else {
paste(x, " is odd")
}
}
# branching and looping combo
for (x in 0:10) {
if (x %/% 2 == 0) {
paste(x, " is even")
} else {
paste(x, " is odd")
}
}
# branching and looping combo
for (x in 0:10) {
if (x %% 2 == 0) {
paste(x, " is even")
} else {
paste(x, " is odd")
}
}
# branching and looping combo
for (x in 0:10) {
if (x %% 2 == 0) {
print(paste(x, " is even"))
} else {
paste(x, " is odd")
}
}
# branching and looping combo
for (x in 0:10) {
if (x %% 2 == 0) {
print(paste(x, "is even"))
} else {
print(paste(x, "is odd"))
}
}
# branching with if
x = 5
if (x == 5) {
print("x is greater than 5")
}
# branching with if... else
x = 2
if (x > 3) {
print("x is greater than 3")
} else {
print("x is less than or equal to 3")
}
# branching with if... else if... else
x = 3
if (x > 3) {
print("x is greater than 3")
} else if (x < 3) {
print("x is less than 3")
} else {
print("x is equal to 3")
}
# looping with range
for (i in 1:5) {
print(i)
}
# looping through elements
names = c("abhinav", "tanush", "dinesh", "sumathi")
for (name in names) {
print(name)
}
# while loop
x = 0
while (x < 5) {
print(x)
x = x + 1
}
# repeat loop
x = 1
repeat {
print(x)
if (x >= 5) {
break
}
x = x + 1
}
# branching and looping combo
for (x in 0:10) {
if (x %% 2 == 0) {
print(paste(x, "is even"))
} else {
print(paste(x, "is odd"))
}
}
clear
clc
cls
# vectors
num_vec = c(1:5)
print(num_vec)
print(num_vec[2])
char_vec = c("a":"d")
char_vec = c("a", "b", "c")
print(char_vec)
print(char_vec[3])
logi_vec = c(TRUE, FALSE, TRUE)
print(logi_vec)
# lists
l = list(
numbers = c(1:3),
names = c("abhinav", "papaya"),
is_list = TRUE
)
print(l)
print(l$names)
# matrices
m = martix(
c(1:6),
nrow = 3,
ncol = 3
)
# matrices
m = matrix(
c(1:6),
nrow = 3,
ncol = 3
)
# matrices
m = matrix(
c(1:6),
nrow = 3,
ncol = 2
)
print(m)
print(m[3,2])
# data frame
df = data.frame(
id = 1:3,
fruit = c("pineapple", "papaya", "mango"),
age = c(1, 2, 1)
)
print(df)
print(df$age)
print(df[df$age > 1])
print(df[df$age > 1, ])
# factors
colors = factor(c("red", "blue", "green", "blue", "red"))
print(colors)
print(levels(colors))
print(colors)
# arrays
arr = array(
c(1:12),
dim = c(3, 2, 2)
)
print(arr)
print(arr[1,1,1])
# vectors
num_vec = c(1:5)
char_vec = c("a", "b", "c")
logi_vec = c(TRUE, FALSE, TRUE)
print(num_vec)
print(num_vec[2])
print(char_vec)
print(char_vec[3])
print(logi_vec)
# vectors
num_vec = c(1:5)
char_vec = c("a", "b", "c")
logi_vec = c(TRUE, FALSE, TRUE)
print(num_vec)
print(num_vec[2])
print(char_vec)
print(char_vec[3])
print(logi_vec)
# lists
l = list(
numbers = c(1:3),
names = c("abhinav", "papaya"),
is_list = TRUE
)
print(l)
print(l$names)
# matrices
m = matrix(
c(1:6),
nrow = 3,
ncol = 2
)
print(m)
print(m[3,2])
# data frame
df = data.frame(
id = 1:3,
fruit = c("pineapple", "papaya", "mango"),
age = c(1, 2, 1)
)
print(df)
print(df$age)
print(df[df$age > 1, ])
# factors
colors = factor(c("red", "blue", "green", "blue", "red"))
print(levels(colors))
print(colors)
# arrays
arr = array(
c(1:12),
dim = c(3, 2, 2)
)
print(arr)
print(arr[1,1,1])
setwd("/Users/abhi/College Work/Year 4 Semester 1 (Sem 7)/Exploratory Data Analysis Lab/Assignment 2")
data = read.csv("./DS3_Match.csv")
data = read.csv("./DS2_Match.csv")
library(dplyr)
library(ggplot2)
library(lubridate)
setwd("/Users/abhi/College Work/Year 4 Semester 1 (Sem 7)/Exploratory Data Analysis Lab/Assignment 2")
data = read.csv("./DS2_Match.csv")
# viewing data
View(data)
library(dplyr)
library(ggplot2)
library(lubridate)
setwd("/Users/abhi/College Work/Year 4 Semester 1 (Sem 7)/Exploratory Data Analysis Lab/Assignment 2")
data = read.csv("./DS2_Match.csv")
# viewing data
View(data)
# checking NaN values (if cleanup is required)
sum(apply(data, 2, is.nan))
untries
# check different host countries
levels(factor(data$Host_Country))
# plotting by host country
country_counts = data %>%
group_by(Host_Country) %>%
summarise(count = length(Host_Country))
pie(country_counts$count, labels=country_counts$Host_Country)
# check different win conditions
levels(factor(data$Win_Type))
# plotting by win condition
win_cond_count = data %>%
group_by(Win_Type) %>%
summarise(count = length(Win_Type))
barplot(win_cond_count$count, xlab="Win Condition", ylab="Count", names.arg=win_cond_count$Win_Type, col="cyan")
# check different city names
levels(factor(data$City_Name))
# plotting by city name, color by host country
city = data %>%
group_by(City_Name, Host_Country) %>%
summarise(count = length(City_Name))
ggplot(city, aes(x=City_Name, y=count, fill=Host_Country)) +
geom_bar(stat="identity") +
geom_text(aes(label=City_Name), vjust=0.5, angle=90, hjust=0) + scale_x_discrete(labels=NULL) +
ylim(0, 100) +
labs(x="City", y="Matches")
# casting match date column to date type
match_dates = data.frame(date=as.Date(data$Match_Date, format="%d-%b-%y"))
match_dates
match_dates.head()
head(match_dates)
# finding the matches played per month
match_dates = match_dates %>%
mutate(month=month(date)) %>%
group_by(month) %>%
summarise(count=length(month))
head(match_dates)
ggplot(match_dates, aes(x=month, y=count, fill=month)) +
geom_bar(stat="identity") +
geom_text(aes(label=month.name[month]), vjust=-0.5) +
labs(x="Month", y="Matches Played")
head(match_dates, 2)
source("~/College Work/Year 4 Semester 1 (Sem 7)/Exploratory Data Analysis Lab/Assignment 2/experiment3.R")
setwd("/Users/abhi/College Work/Year 4 Semester 1 (Sem 7)/Exploratory Data Analysis Lab/Assignment 2")
getwd()
data = read.csv("DS2_Match.csv")
library(dplyr)
library(tidyr)
library(magrittr)
setwd("/Users/abhi/College Work/Year 4 Semester 1 (Sem 7)/Exploratory Data Analysis Lab/Assignment 2")
data = read.csv("DS2_Match.csv")
library(dplyr)
library(tidyr)
library(magrittr)
setwd("/Users/abhi/College Work/Year 4 Semester 1 (Sem 7)/Exploratory Data Analysis Lab/Assignment 2")
data = read.csv("DS2_Match.csv")
# arrange()
# arrange by win type
win_type_arranged = data %>% arrange(Win_Type)
View(win_type_arranged)
# arrange()
# arrange by win type
win_type_arranged = data %>% arrange(Win_Type)
View(win_type_arranged)
# arrange by city name
city_name_arranged = data %>% arrange(City_Name)
View(city_name_arranged)
# select()
# selecting only match date
match_dates = data %>% select(Match_Date)
View(match_dates)
# selecting city and country
city_and_country = data %>% select(City_Name, Host_Country)
View(city_and_country)
# arrange()
# arrange by win type
win_type_arranged = data %>% arrange(Win_Type)
head(win_type_arranged)
all_but_match_id = data %>% select(-Match_Id)
View(all_but_match_id)
bangalore_matches = data %>% filter(City_Name == "Bangalore")
View(bangalore_matches)
no_result_matches = data %>% filter(Win_Type == "No Result")
View(no_result_matches)
# filtering by country as India and toss decision as bat
india_bat_matches = data %>% filter(Host_Country == "India", Toss_Decision == "bat")
View(india_bat_matches)
custom_data = data.frame(
Name = c("Abhinav", "Tanush", "Sumathi"),
English = c(45, 67, 87),
Math = c(53, 65, 23)
)
# gathering courses
gathered = custom_data %>% gather("Course", "Marks", 2:3)
View(gathered)
spread = gathered %>% spread("Course", "Marks")
View(spread)
grouped = data %>% group_by(Host_Country) %>%
summarise(count = n())
View(grouped)
# mutate()
# mutating by adding a column called year
mutated = data %>% mutate(year=format(as.Date(data$Match_Date, format="%d-%b-%y"), "%Y"))
View(mutated)
# dimentions and names of columns
dim(data)
names(data)
setwd("/Users/abhi/College Work/Year 4 Semester 1 (Sem 7)/Exploratory Data Analysis Lab/Assignment 2")
data = read.csv("./DS2_Match.csv")
# dimentions and names of columns
dim(data)
names(data)
# sorting data by win type
sort(data$Win_Type)
# sorting data by win type
head(sort(data$Win_Type))
# summary of data
summary(data)
# finding min and max of first umpire id
min(data$First_Umpire_Id)
max(data$First_Umpire_Id)
# finding mean and median of won by amount
data$Won_By = sapply(data$Won_By, function(x) {
if (x == "NULL") {
return(0)
}
x
})
data$Won_By = as.numeric(data$Won_By)
mean(data$Won_By)
median(data$Won_By)
# finding quantiles of won by
quantile(data$Won_By)
