summary(imputed)
aggr(imputed, col=c("blue", "yellow"),
numbers=TRUE, sortVars=TRUE,
labels=names(iris.mis), cex.axis=.7,
gap=3, ylab=c("Missing data","Pattern"))
aggr(imputed$imp, col=c("blue", "yellow"),
numbers=TRUE, sortVars=TRUE,
labels=names(imputed$imp), cex.axis=.7,
gap=3, ylab=c("Missing data","Pattern"))
imputed$imp
imputed = complete(imputed, 3)
ggplot(data, aes(Sepal.Length),
geom_histogram(color="#0099F8"))
library(ggplot2)
ggplot(data, aes(Sepal.Length),
geom_histogram(color="#0099F8"))
ggplot(data, aes(Sepal.Length) +
ggplot(data, aes(Sepal.Length)) +
geom_histogram(color="#0099F8")
ggplot(data, aes(Sepal.Length)) +
geom_histogram(color="#0099F8")
ggplot(data, aes(Sepal.Length)) +
geom_histogram(fill="#0099F8")
ggplot(data, aes(Sepal.Length)) +
geom_histogram(color="black", fill="#0099F8")
# simple imputations for Sepal.Length
imputed = data.frame(
Original = data$Sepal.Length,
Imp.Zero = replace(data$Sepal.Length, is.na(data$Sepal.Length), 0),
Imp.Mean = replace(data$Sepal.Length, is.na(data$Sepal.Length), mean(titanic_train$Age, na.rm = TRUE)),
Imp.Median = replace(data$Sepal.Length, is.na(data$Sepal.Length), median(titanic_train$Age, na.rm = TRUE)),
)
# simple imputations for Sepal.Length
imputed = data.frame(
Original = data$Sepal.Length,
Imp.Zero = replace(data$Sepal.Length, is.na(data$Sepal.Length), 0),
Imp.Mean = replace(data$Sepal.Length, is.na(data$Sepal.Length), mean(data$Sepal.Length, na.rm = TRUE)),
Imp.Median = replace(data$Sepal.Length, is.na(data$Sepal.Length), median(data$Sepal.Length, na.rm = TRUE)),
)
replace(data$Sepal.Length, is.na(data$Sepal.Length), 0),
replace(data$Sepal.Length, is.na(data$Sepal.Length), 0)
ggplot(iris.mis, aes(Sepal.Length)) +
geom_histogram(color="black", fill="#0099F8")
# simple imputations for Sepal.Length
imputed = data.frame(
Original = iris.mis$Sepal.Length,
Imp.Zero = replace(iris.mis$Sepal.Length, is.na(iris.mis$Sepal.Length), 0),
Imp.Mean = replace(iris.mis$Sepal.Length, is.na(iris.mis$Sepal.Length), mean(iris.mis$Sepal.Length, na.rm = TRUE)),
Imp.Median = replace(iris.mis$Sepal.Length, is.na(iris.mis$Sepal.Length), median(iris.mis$Sepal.Length, na.rm = TRUE)),
)
Imp.Zero = replace(iris.mis$Sepal.Length, is.na(iris.mis$Sepal.Length), 0)
replace(iris.mis$Sepal.Length, is.na(iris.mis$Sepal.Length), 0)
replace(iris.mis$Sepal.Length, is.na(iris.mis$Sepal.Length), mean(iris.mis$Sepal.Length, na.rm = TRUE))
replace(iris.mis$Sepal.Length, is.na(iris.mis$Sepal.Length), median(iris.mis$Sepal.Length, na.rm = TRUE))
# simple imputations for Sepal.Length
imputed = data.frame(
Original = iris.mis$Sepal.Length,
Imp.Zero = replace(iris.mis$Sepal.Length, is.na(iris.mis$Sepal.Length), 0),
Imp.Mean = replace(iris.mis$Sepal.Length, is.na(iris.mis$Sepal.Length), mean(iris.mis$Sepal.Length, na.rm = TRUE)),
Imp.Median = replace(iris.mis$Sepal.Length, is.na(iris.mis$Sepal.Length), median(iris.mis$Sepal.Length, na.rm = TRUE)),
)
# simple imputations for Sepal.Length
imputed = data.frame(
Original = iris.mis$Sepal.Length,
Imp.Zero = replace(iris.mis$Sepal.Length, is.na(iris.mis$Sepal.Length), 0),
Imp.Mean = replace(iris.mis$Sepal.Length, is.na(iris.mis$Sepal.Length), mean(iris.mis$Sepal.Length, na.rm = TRUE)),
Imp.Median = replace(iris.mis$Sepal.Length, is.na(iris.mis$Sepal.Length), median(iris.mis$Sepal.Length, na.rm = TRUE))
)
h1 = ggplot(imputed, aes(Original)) +
geom_histogram(fill = "red", color = "#000000", position = "identity") +
ggtitle("Original distribution")
h2 = ggplot(imputed, aes(Imp.Zero)) +
geom_histogram(fill = "green", color = "#000000", position = "identity") +
ggtitle("Zero-imputed distribution")
h3 = ggplot(imputed, aes(Imp.Mean)) +
geom_histogram(fill = "blue", color = "#000000", position = "identity") +
ggtitle("Mean-imputed distribution")
h4 = ggplot(imputed, aes(Imp.Median)) +
geom_histogram(fill = "yellow", color = "#000000", position = "identity") +
ggtitle("Median-imputed distribution")
plot_grid(h1, h2, h3, h4, nrow = 2, ncol = 2)
library(cowplot)
plot_grid(h1, h2, h3, h4, nrow = 2, ncol = 2)
ggplot(iris.mis, aes(x = Sepal.Length)) +
geom_histogram(color="black", fill="#0099F8")
# simple imputations for Sepal.Length
imputed = data.frame(
Original = iris.mis$Sepal.Length,
Imp.Zero = replace(iris.mis$Sepal.Length, is.na(iris.mis$Sepal.Length), 0),
Imp.Mean = replace(iris.mis$Sepal.Length, is.na(iris.mis$Sepal.Length), mean(iris.mis$Sepal.Length, na.rm = TRUE)),
Imp.Median = replace(iris.mis$Sepal.Length, is.na(iris.mis$Sepal.Length), median(iris.mis$Sepal.Length, na.rm = TRUE))
)
h1 = ggplot(imputed, aes(x = Original)) +
geom_histogram(fill = "red", color = "#000000", position = "identity") +
ggtitle("Original distribution")
h2 = ggplot(imputed, aes(x = Imp.Zero)) +
geom_histogram(fill = "green", color = "#000000", position = "identity") +
ggtitle("Zero-imputed distribution")
h3 = ggplot(imputed, aes(x = Imp.Mean)) +
geom_histogram(fill = "blue", color = "#000000", position = "identity") +
ggtitle("Mean-imputed distribution")
h4 = ggplot(imputed, aes(x = Imp.Median)) +
geom_histogram(fill = "yellow", color = "#000000", position = "identity") +
ggtitle("Median-imputed distribution")
plot_grid(h1, h2, h3, h4, nrow = 2, ncol = 2)
# viewing missing values
md.pattern(iris.mis)
# viewing missing values
md.pattern(iris.mis)
par(las = 2)  # Rotate the axis labels (2 means perpendicular to the axis)
md.pattern(iris.mis, plot = TRUE)
par(las = 2)  # Rotate the axis labels (2 means perpendicular to the axis)
md.pattern(iris.mis, plot = TRUE)
par(las = 1)  # Rotate the axis labels (2 means perpendicular to the axis)
md.pattern(iris.mis, plot = TRUE)
# viewing missing values
md.pattern(iris.mis, plot=FALSE)
# viewing missing values
md.pattern(iris.mis)
# viewing missing values
md.pattern(iris.mis, rotate.names=TRUE)
# performing imputations with mice algorithms
mice_imputed = data.frame(
original = iris.mis$Sepal.Length,
Imp.PMM = complete(mice(iris.mis, method="pmm"))$Sepal.Length,
Imp.CART = complete(mice(iris.mis, method="cart"))$Sepal.Length,
Imp.Lasso = complete(mice(iris.mis, method="lasso.norm"))$Sepal.Length
)
# plotting the mice imputations
h1 = ggplot(mice_imputed, aes(x=Original)) +
geom_histogram(fill="red", color="black", position="identity") +
ggtitle("Original distribution")
h2 = ggplot(mice_imputed, aes(x=Imp.PMM)) +
geom_histogram(fill="green", color="black", position="identity") +
ggtitle("PMM-imputed distribution")
h3 = ggplot(mice_imputed, aes(x=Imp.CART)) +
geom_histogram(fill="blue", color="black", position="identity") +
ggtitle("CART-imputed distribution")
h4 = ggplot(mice_imputed, aes(x=Imp.Lasso)) +
geom_histogram(fill="yellow", color="black", position="identity") +
ggtitle("Lasso-imputed distribution")
plot_grid(h1, h2, h3, h4, nrow=2, ncol=2)
# performing imputations with mice algorithms
mice_imputed = data.frame(
Original = iris.mis$Sepal.Length,
Imp.PMM = complete(mice(iris.mis, method="pmm"))$Sepal.Length,
Imp.CART = complete(mice(iris.mis, method="cart"))$Sepal.Length,
Imp.Lasso = complete(mice(iris.mis, method="lasso.norm"))$Sepal.Length
)
# plotting the mice imputations
h1 = ggplot(mice_imputed, aes(x=Original)) +
geom_histogram(fill="red", color="black", position="identity") +
ggtitle("Original distribution")
h2 = ggplot(mice_imputed, aes(x=Imp.PMM)) +
geom_histogram(fill="green", color="black", position="identity") +
ggtitle("PMM-imputed distribution")
h3 = ggplot(mice_imputed, aes(x=Imp.CART)) +
geom_histogram(fill="blue", color="black", position="identity") +
ggtitle("CART-imputed distribution")
h4 = ggplot(mice_imputed, aes(x=Imp.Lasso)) +
geom_histogram(fill="yellow", color="black", position="identity") +
ggtitle("Lasso-imputed distribution")
plot_grid(h1, h2, h3, h4, nrow=2, ncol=2)
# imputations with missForest
missforest_imputed = data.frame(
Original = iris.mis$Sepal.Length,
Imp.Missforest = missForest(iris.mis)$ximp$Sepal.Length
)
# plotting the missForest imputations
h1 = ggplot(missforest_imputed, aes(x=Original)) +
geom_histogram(fill="red", color="black", position="identity") +
ggtitle("Original distribution")
h2 = ggplot(missforest_imputed, aes(x=Imp.Missforest)) +
geom_histogram(fill="green", color="black", position="identity") +
ggtitle("missForest-imputed distribution")
plot_grid(h1, h2, nrow=1, ncol=2)
library(dplyr)
library(missForest)
library(mice)
library(VIM)
library(ggplot2)
library(cowplot)
data = iris
View(data)
# dropping labels
data = data %>% select(-c("Species"))
View(data)
# adding 10% random values
iris.mis <- prodNA(data, noNA = 0.1)
View(iris.mis)
ggplot(iris.mis, aes(x = Sepal.Length)) +
geom_histogram(color="black", fill="#0099F8")
# simple imputations for Sepal.Length
imputed = data.frame(
Original = iris.mis$Sepal.Length,
Imp.Zero = replace(iris.mis$Sepal.Length, is.na(iris.mis$Sepal.Length), 0),
Imp.Mean = replace(iris.mis$Sepal.Length, is.na(iris.mis$Sepal.Length), mean(iris.mis$Sepal.Length, na.rm = TRUE)),
Imp.Median = replace(iris.mis$Sepal.Length, is.na(iris.mis$Sepal.Length), median(iris.mis$Sepal.Length, na.rm = TRUE))
)
# plotting the simple imputations
h1 = ggplot(imputed, aes(x=Original)) +
geom_histogram(fill="red", color="black", position="identity") +
ggtitle("Original distribution")
h2 = ggplot(imputed, aes(x=Imp.Zero)) +
geom_histogram(fill="green", color="black", position="identity") +
ggtitle("Zero-imputed distribution")
h3 = ggplot(imputed, aes(x=Imp.Mean)) +
geom_histogram(fill="blue", color="black", position="identity") +
ggtitle("Mean-imputed distribution")
h4 = ggplot(imputed, aes(x=Imp.Median)) +
geom_histogram(fill="yellow", color="black", position="identity") +
ggtitle("Median-imputed distribution")
plot_grid(h1, h2, h3, h4, nrow=2, ncol=2)
# viewing missing values
md.pattern(iris.mis, rotate.names=TRUE)
# performing imputations with mice algorithms
mice_imputed = data.frame(
Original = iris.mis$Sepal.Length,
Imp.PMM = complete(mice(iris.mis, method="pmm"))$Sepal.Length,
Imp.CART = complete(mice(iris.mis, method="cart"))$Sepal.Length,
Imp.Lasso = complete(mice(iris.mis, method="lasso.norm"))$Sepal.Length
)
# plotting the mice imputations
h1 = ggplot(mice_imputed, aes(x=Original)) +
geom_histogram(fill="red", color="black", position="identity") +
ggtitle("Original distribution")
h2 = ggplot(mice_imputed, aes(x=Imp.PMM)) +
geom_histogram(fill="green", color="black", position="identity") +
ggtitle("PMM-imputed distribution")
h3 = ggplot(mice_imputed, aes(x=Imp.CART)) +
geom_histogram(fill="blue", color="black", position="identity") +
ggtitle("CART-imputed distribution")
h4 = ggplot(mice_imputed, aes(x=Imp.Lasso)) +
geom_histogram(fill="yellow", color="black", position="identity") +
ggtitle("Lasso-imputed distribution")
plot_grid(h1, h2, h3, h4, nrow=2, ncol=2)
# imputations with missForest
missforest_imputed = data.frame(
Original = iris.mis$Sepal.Length,
Imp.Missforest = missForest(iris.mis)$ximp$Sepal.Length
)
# plotting the missForest imputations
h1 = ggplot(missforest_imputed, aes(x=Original)) +
geom_histogram(fill="red", color="black", position="identity") +
ggtitle("Original distribution")
h2 = ggplot(missforest_imputed, aes(x=Imp.Missforest)) +
geom_histogram(fill="green", color="black", position="identity") +
ggtitle("missForest-imputed distribution")
plot_grid(h1, h2, nrow=1, ncol=2)
X = scan(what = numeric())
Y = scan(what = numeric())
cov(X, Y)
cor(X,y)
cor(X, Y)
X = scan(what = numeric())
X = scan(what = numeric())
Y = scan(what = numeric())
cov(X, Y)
cor(X, Y)
# z score method
data = c(-25, 10, 12, 12, 13, 12, 11, 14, 13, 15, 100, 101)
mean.data = mean(data)
std.data = std(data)
std.data = sd(data)
# outliers have -3 < z.score < 3
outliers = data[abs(z.scores) > 3]
z.scores = (data - mean.data) / std.data
# outliers have -3 < z.score < 3
outliers = data[abs(z.scores) > 3]
# z score method
data = c(-25, 10, 12, 12, 13, 12, 11, 14, 13, 15, 100)
mean.data = mean(data)
std.data = sd(data)
z.scores = (data - mean.data) / std.data
# outliers have -3 < z.score < 3
outliers = data[abs(z.scores) > 3]
# outliers have -3 < z.score < 3
outliers = data[abs(z.scores) > 3]
# z score method
data = c(10, 12, 12, 13, 12, 11, 14, 13, 15, 100)
mean.data = mean(data)
std.data = sd(data)
z.scores = (data - mean.data) / std.data
# outliers have -3 < z.score < 3
outliers = data[abs(z.scores) > 3]
# outliers have -3 < z.score < 3
outliers = data[abs(z.scores) > 3]
z.scores
# z score method
data = c(10, 12, 12, 13, 12, 11, 14, 13, 15, 200)
mean.data = mean(data)
std.data = sd(data)
z.scores = (data - mean.data) / std.data
# outliers have -3 < z.score < 3
outliers = data[abs(z.scores) > 3]
z.scores
# z score method
data = c(10, 12, 12, 13, 12, 11, 14, 13, 15, 200)
mean.data = mean(data)
std.data = sd(data)
z.scores = (data - mean.data) / std.data
# outliers have -3 < z.score < 3
outliers = data[abs(z.scores) > 3]
z.scores
# z score method
data = c(10, 12, 12, 13, 12, 11, 14, 13, 15, 1000)
mean.data = mean(data)
std.data = sd(data)
z.scores = (data - mean.data) / std.data
# outliers have -3 < z.score < 3
outliers = data[abs(z.scores) > 3]
z.scores
mean.data = mean(data)
std.data = sd(data)
z.scores = (data - mean.data) / std.data
# z score method
data = c(10, 12, 12, 13, 12, 11, 14, 13, 15, 100)
mean.data = mean(data)
std.data = sd(data)
z.scores = (data - mean.data) / std.data
# outliers have -3 < z.score < 3
outliers = data[abs(z.scores) > 3]
z.scores
# z score method
data = c(-100, 10, 12, 12, 13, 12, 11, 14, 13, 15, 100)
mean.data = mean(data)
std.data = sd(data)
z.scores = (data - mean.data) / std.data
# outliers have -3 < z.score < 3
outliers = data[abs(z.scores) > 3]
z.scores
# z score method
data = c(10, 10, 11, 11, 12, 12, 13, 12, 11, 14, 13, 15, 100)
mean.data = mean(data)
std.data = sd(data)
z.scores = (data - mean.data) / std.data
# outliers have -3 < z.score < 3
outliers = data[abs(z.scores) > 3]
z.scores
# inter quartile range method
data = c(10, 10, 11, 11, 12, 12, 13, 12, 11, 14, 13, 15, 100)
q1 = quantile(data, 0.25)
q3 = quantile(data, 1.5)
q3 = quantile(data, 0.75)
iqr = q3 - q1
# outliers lie outside of the inter quartile range
outliers <- data[data < lower_bound | data > upper_bound]
# outliers lie outside of the inter quartile range
outliers <- data[data < q1 | data > q3]
outliers
outliers
# boxplot method (purely visualisation)
data = c(10, 10, 11, 11, 12, 12, 13, 12, 11, 14, 13, 15, 100)
boxplot()
boxplot(data)
# z score method
data = c(10, 10, 11, 11, 12, 12, 13, 12, 11, 14, 13, 15, 100)
mean.data = mean(data)
std.data = sd(data)
z.scores = (data - mean.data) / std.data
# outliers have -3 < z.score < 3
outliers = data[abs(z.scores) > 3]
outliers
# inter quartile range method
data = c(10, 10, 11, 11, 12, 12, 13, 12, 11, 14, 13, 15, 100)
q1 = quantile(data, 0.25)
q3 = quantile(data, 0.75)
iqr = q3 - q1
# outliers lie outside of the inter quartile range
outliers <- data[data < q1 | data > q3]
outliers
source("~/College Work/Year 4 Semester 1 (Sem 7)/Exploratory Data Analysis Lab/Experiment 7/experiment7.R")
# experiment 6 items
cov(data$Sepal.Length, data$Sepal.Width)
cor(data$Sepal.Length, data$Sepal.Width)
# experiment 7 items
# z score method
data = iris$Sepal.Length
mean.data = mean(data)
std.data = sd(data)
z.scores = (data - mean.data) / std.data
# outliers have -3 < z.score < 3
outliers = data[abs(z.scores) > 3]
outliers
# inter quartile range method
data = iris$Sepal.Length
q1 = quantile(data, 0.25)
q3 = quantile(data, 0.75)
iqr = q3 - q1
# outliers lie outside of the inter quartile range
outliers <- data[data < q1 | data > q3]
outliers
# inter quartile range method
data = iris$Sepal.Length
q1 = quantile(data, 0.25)
q3 = quantile(data, 0.75)
iqr = q3 - q1
# outliers lie outside of the inter quartile range
outliers <- data[data < q1 | data > q3]
outliers
# boxplot method (purely visualisation)
data = iris$Sepal.Length
boxplot(data)
# 7. plotting with decompose
decompose(data)
data
# 1. loading the data
data = read.csv("airpassengers.csv")
data
library(lubridate)
setwd("~/College Work/Year 4 Semester 1 (Sem 7)/Exploratory Data Analysis Lab/Experiment 7-1")
# 1. loading the data
data = read.csv("airpassengers.csv")
data(data)
data
# 1. loading the data
data = read.csv("airpassengers.csv")
data$Month = as.Date(data$Month, format = "%Y-%m")
data
str(data)
# 1. loading the data
data = read.csv("airpassengers.csv")
str(data)
# 1. loading the data
data = read.csv("airpassengers.csv")
data$Month = as.Date(paste0(data$Month, "-01"), format = "%Y-%m-%d")
str(data)
# 2. structure and data types of data
structure(data)
typeof(data$Month)
typeof(data$X.Passengers)
# 3. checking for missing values in the data
sum(is.na(data))
# 4. checking start and end date
min(data$Month)
max(data$Month)
# 5. checking frequency of the data
frequency(data)
# 6. checking summary of the data
summary(data)
# 7. plotting with decompose
decompose(data)
# 7. plotting with decompose
ts_data = ts(data$X.Passengers, start = c(1949, 1), frequency = 12)
# 7. plotting with decompose
ts.data = ts(data$X.Passengers, start = c(1949, 1), frequency = 12)
plot(decompose(ts.data))
# 8. plotting the data
plot(data)
# 9. plotting the time series of the data
plot.ts(data)
# 10. regression line for Q9
abline(lm(data$X.Passengers~data$Month))
# 10. regression line for Q9
abline(lm(data$X.Passengers~data$Month))
# 9. plotting the time series of the data
plot.ts(data)
# 10. regression line for Q9
abline(lm(data$X.Passengers~data$Month))
# 11. cycles for the data
cycle(data)
# 11. cycles for the data
cycle(ts.data)
# 12. making the data stationary and plotting it
plot(log(ts.data))
plot(diff(log(ts.data)))
# 13. box plot
boxplot(data~cycle(data))
# 13. box plot
boxplot(ts.data~cycle(ts.data))
library(lubridate)
setwd("~/College Work/Year 4 Semester 1 (Sem 7)/Exploratory Data Analysis Lab/Experiment 7-1")
# 1. loading the data
data = read.csv("airpassengers.csv")
data$Month = as.Date(paste0(data$Month, "-01"), format = "%Y-%m-%d")
# 2. structure and data types of data
structure(data)
typeof(data$Month)
typeof(data$X.Passengers)
# 2. structure and data types of data
head(data)
typeof(data$Month)
typeof(data$X.Passengers)
# 2. structure and data types of data
head(data)
typeof(data$Month)
typeof(data$X.Passengers)
# 3. checking for missing values in the data
sum(is.na(data))
# 4. checking start and end date
min(data$Month)
max(data$Month)
# 5. checking frequency of the data
frequency(data)
# 6. checking summary of the data
summary(data)
# 7. plotting with decompose
ts.data = ts(data$X.Passengers, start = c(1949, 1), frequency = 12)
plot(decompose(ts.data))
# 8. plotting the data
plot(data)
# 9. plotting the time series of the data
plot.ts(data)
# 10. regression line for the data
abline(lm(data$X.Passengers~data$Month))
# 11. cycles for the data
cycle(ts.data)
# 12. making the data stationary and plotting it
plot(log(ts.data))
plot(diff(log(ts.data)))
# 13. box plot
boxplot(ts.data~cycle(ts.data))
