stat_smooth(method = lm, col = "green") +
scale_y_continuous("Miles per Gallon", limits = c(2, 35), expand = c(0, 0)) +
scale_x_continuous("Weight", limits = c(0, 25), expand = c(0, 0)) +
coord_equal() +
labs(title = "Miles per Gallon vs Horsepower")
ggplot(data = mtcars, aes(x = wt, y = hp, col = am)) +
geom_point() +
geom_smooth() +
coord_cartesian(xlim = c(3, 6))
# smoothing with stats
ggplot(data = mtcars, aes(x = hp, y = mpg)) +
geom_point() +
stat_smooth(method = lm, col = "cyan") +
labs(title = "Miles per Gallon vs Horsepower")
ggplot(data = mtcars, aes(x = wt, y = hp, col = am)) +
geom_point() +
geom_smooth() +
coord_cartesian(xlim = c(3, 6))
ggplot(data = mtcars, aes(x = wt, y = hp, col = am)) +
geom_point() +
geom_smooth() +
coord_cartesian(xlim = c(3, 6))
ggplot(data = mtcars, aes(x = wt, y = hp, col = factor(am))) +
geom_point() +
geom_smooth() +
coord_cartesian(xlim = c(3, 6))
ggplot(data = mtcars, aes(x = wt, y = hp, col = am)) +
geom_point() +
geom_smooth() +
coord_cartesian(xlim = c(3, 6))
ggplot(data = mtcars, aes(x = hp, y = mpg)) +
geom_point() +
facet_grid(. ~ cyl) +
theme(plot.background = element_rect(fill = "blue", color = "gray")) +
labs(title = "Miles per Gallon vs Horsepower")
# changing ggplot theme
ggplot(data = mtcars, aes(x = hp, y = mpg)) +
geom_point() +
facet_grid(. ~ cyl) +
theme(plot.background = element_rect(fill = "blue", color = "gray")) +
labs(title = "Miles per Gallon vs Horsepower")
ggplot(data = mtcars, aes(x = wt, y = hp, col = am)) +
geom_point() +
geom_smooth() +
coord_cartesian(xlim = c(3, 6))
# smoothing with stats
ggplot(data = mtcars, aes(x = hp, y = mpg)) +
geom_point() +
stat_smooth(method = lm, col = "cyan") +
labs(title = "Miles per Gallon vs Horsepower")
ggplot(data = mtcars, aes(x = wt, y = hp, col = am)) +
geom_point() +
geom_smooth() +
coord_cartesian(xlim = c(3, 6))
ggplot(data = mtcars, aes(x = wt, y = hp, col = am)) +
geom_point() +
geom_smooth()
ggplot(data = mtcars, aes(x = wt, y = hp, col = am)) +
geom_point() +
geom_smooth() +
coord_cartesian(xlim = c(3, 6))
packages.install("sparklyr")
package.install("sparklyr")
install.packages("sparklyr")
options(timeout = 1000)
install.packages("sparklyr")
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
library(sparklyr)
library(dplyr)
spark_install(version = "2.4.3", hadoop_version = "2.7")
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
library(sparklyr)
library(dplyr)
spark_install(version = "2.4.3", hadoop_version = "2.7")
spark_available_versions()
library("sparklyr")
spark_available_versions()
spark_installed_versions()
install.packages("cowplot")
install.packages("googleway")
install.packages("ggplot2")
install.packages("ggrepel")
install.packages("ggspatial")
options(timeout = 10000)
install.packages("sf")
options(timeout = 1000)
install.packages("sparklyr")
library("sparklyr")
spark_available_versions()
spark_installed_versions()
sc <- spark_connect(master="spark://localhost:7077",
version = "3.5",
config = spark_config(),
spark_home = "/opt/homebrew/Cellar/apache-spark/3.5.1/libexec/")
cars = copy_to(sc, mtcars)
sc <- spark_connect(master="spark://localhost:7077",
version = "3.5",
config = spark_config(),
spark_home = "/opt/homebrew/Cellar/apache-spark/3.5.1/libexec/")
sparklyr::spark_last_error()
sc <- spark_connect(master="spark://localhost:7077",
version = "3.5",
config = spark_config(),
spark_home = "/opt/homebrew/Cellar/apache-spark/3.5.1/libexec/")
View(sc)
sc <- spark_connect(master="spark://localhost:7077",
version = "3.5",
config = spark_config(),
spark_home = "/opt/homebrew/Cellar/apache-spark/3.5.1/libexec/")
sc <- spark_connect(master="spark://localhost:7077",
version = "3.5",
config = spark_config(),
spark_home = "/opt/homebrew/Cellar/apache-spark/3.5.1/libexec/")
library("sparklyr")
sc <- spark_connect(master="spark://localhost:7077",
version = "3.5",
config = spark_config(),
spark_home = "/opt/homebrew/Cellar/apache-spark/3.5.1/libexec/")
cars = copy_to(sc, mtcars)
library(sparklyr)
sc <- spark_connect(master = "spark://localhost:7077", spark_home = "/opt/homebrew/Cellar/apache-spark/3.5.1/libexec/", version = "3.5", config = spark_config())
# mysql connection
install.packages("RMySQL")
library(RMySQL)
mysqlconnection = dbConnect(RMySQL::MySQL(),
dbname='university',
host='localhost',
port=3306,
user='root',
password='root')
library("ggplot2")
library("dplyr")
ggplot(mpg, aes(displ, hwy, color = class)) + geom_point()
ggplot(mpg, aes(displ, hwy, color = class))
+ geom_point()
ggplot(mpg, aes(displ, hwy, color = class)) + geom_point()
ggplot(mpg) + geom_point()
ggplot(mpg, aes(displ, hwy, color = class)) + geom_point()
head(mtcars)
disply
displ
ggplot(mpg, aes(displ, hwy, color = class)) + geom_point()
ggplot(mpg, aes(displ, hwy, color = class)) + geom_point()
mpg
# histogram
ggplot(data = mtcars, aes(x = hp)) +
geom_histogram(binwidth = 5) +
labs(x = "Horsepower", y = "Count", title = "Histogram of Horsepower")
# histogram
ggplot(data = mtcars, aes(x = hp)) +
geom_histogram() +
labs(x = "Horsepower", y = "Count", title = "Histogram of Horsepower")
# histogram
ggplot(data = mtcars, aes(x = hp)) +
geom_histogram(binwidth = 5) +
labs(x = "Horsepower", y = "Count", title = "Histogram of Horsepower")
p = ggplot(data = mtcars, aes(x = hp, y = mpg, shape = factor(cyl))) +
geom_point()
# subplots based on am (expand vertically)
p + facet_grid(am ~ .) +
labs(x = "Horsepower", y = "Miles per Gallon", title = "Miles per Gallon vs Horsepower")
# subplots based on cyl (expand horizontally)
p + facet_grid(. ~ cyl) +
labs(x = "Horsepower", y = "Miles per Gallon", title = "Miles per Gallon vs Horsepower")
# subplots based on am (expand vertically)
p + facet_grid(am ~ cyl) +
labs(x = "Horsepower", y = "Miles per Gallon", title = "Miles per Gallon vs Horsepower")
# subplots based on am (expand vertically)
p + facet_grid(am ~ .) +
labs(x = "Horsepower", y = "Miles per Gallon", title = "Miles per Gallon vs Horsepower")
# smoothing with stats
ggplot(data = mtcars, aes(x = hp, y = mpg)) +
geom_point() +
stat_smooth(method = lm, col = "cyan") +
labs(title = "Miles per Gallon vs Horsepower")
# adjusting axes and changing the display spacing
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
stat_smooth(method = lm, col = "green") +
scale_y_continuous("Miles per Gallon", limits = c(2, 35), expand = c(0, 0)) +
scale_x_continuous("Weight", limits = c(0, 25), expand = c(0, 0)) +
coord_equal() +
labs(title = "Miles per Gallon vs Horsepower")
# adjusting axes and changing the display spacing
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
stat_smooth(method = lm, col = "green") +
scale_y_continuous("Miles per Gallon", limits = c(2, 35), expand = c(0, 0)) +
scale_x_continuous("Weight", limits = c(0, 25), expand = c(10, 0)) +
coord_equal() +
labs(title = "Miles per Gallon vs Horsepower")
# adjusting axes and changing the display spacing
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
stat_smooth(method = lm, col = "green") +
scale_y_continuous("Miles per Gallon", limits = c(2, 35), expand = c(0, 0)) +
scale_x_continuous("Weight", limits = c(0, 25), expand = c(0, 0)) +
coord_equal() +
labs(title = "Miles per Gallon vs Horsepower")
# adjusting axes and changing the display spacing
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
stat_smooth(method = lm, col = "green") +
scale_y_continuous("Miles per Gallon", limits = c(2, 35), expand = c(0, 0)) +
scale_x_continuous("Weight", limits = c(0, 25), expand = c(10, 0)) +
coord_equal() +
labs(title = "Miles per Gallon vs Horsepower")
# adjusting axes and changing the display spacing
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
stat_smooth(method = lm, col = "green") +
scale_y_continuous("Miles per Gallon", limits = c(2, 35), expand = c(0, 0)) +
scale_x_continuous("Weight", limits = c(0, 25), expand = c(0, 0)) +
coord_equal() +
labs(title = "Miles per Gallon vs Horsepower")
# adjusting axes and changing the display spacing
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
stat_smooth(method = lm, col = "green") +
scale_y_continuous("Miles per Gallon", limits = c(2, 35), expand = c(0, 0)) +
scale_x_continuous("Weight", limits = c(0, 25), expand = c(0, 10)) +
coord_equal() +
labs(title = "Miles per Gallon vs Horsepower")
# adjusting axes and changing the display spacing
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
stat_smooth(method = lm, col = "green") +
scale_y_continuous("Miles per Gallon", limits = c(2, 35), expand = c(0, 0)) +
scale_x_continuous("Weight", limits = c(0, 25), expand = c(0, 0)) +
coord_equal() +
labs(title = "Miles per Gallon vs Horsepower")
# adjusting axes and changing the display spacing
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
stat_smooth(method = lm, col = "green") +
scale_y_continuous("Miles per Gallon", limits = c(2, 35), expand = c(0, 10)) +
scale_x_continuous("Weight", limits = c(0, 25), expand = c(0, 0)) +
coord_equal() +
labs(title = "Miles per Gallon vs Horsepower")
# adjusting axes and changing the display spacing
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
stat_smooth(method = lm, col = "green") +
scale_y_continuous("Miles per Gallon", limits = c(2, 35), expand = c(0, 0)) +
scale_x_continuous("Weight", limits = c(0, 25), expand = c(0, 0)) +
coord_equal() +
labs(title = "Miles per Gallon vs Horsepower")
# limiting plot and line smoothing to x = [3, 6]
ggplot(data = mtcars, aes(x = wt, y = hp, col = am)) +
geom_point() +
geom_smooth() +
coord_cartesian(xlim = c(3, 6))
mysqlconnection = dbConnect(RMySQL::MySQL(),
dbname='university',
host='localhost',
port=3306,
user='root',
password='root')
mysqlconnection = dbConnect(RMySQL::MySQL(),
dbname='papaya',
host='localhost',
port=3306,
user='root',
password='root')
# mysql connection
install.packages("DBI")
install.packages("DBI")
library(DBI)
install.packages("DBI")
conn = dbConnect(RSQLite::SQLite(),
dbname='papaya',
host='localhost',
port=3306,
user='root',
password='root')
library(DBI)
conn = dbConnect(RSQLite::SQLite(), dbname='papaya', host='localhost', port=3306,
user='root', password='root')
options(timeout = 1000))
options(timeout = 1000)
install.packages("RSQLite")
library(DBI)
library(RSQLite)
conn = dbConnect(RSQLite::SQLite(), dbname='papaya', host='localhost', port=3306,
user='root', password='root')
dbWriteTable(con, "mtcars", mtcars)
dbWriteTable(conn, "mtcars", mtcars)
dbWriteTable(conn, "papaya.mtcars", mtcars)
library(sparklyr)
sc <- spark_connect(master = "spark://localhost:7077", spark_home = "/opt/homebrew/Cellar/apache-spark/3.5.1/libexec/", version = "3.5", config = spark_config())
spark_installed_versions()
sc <- spark_connect(master="local[*]",
version = "3.5",
config = spark_config(),
spark_home = "/opt/homebrew/Cellar/apache-spark/3.5.1/libexec/")
cars = copy_to(sc, mtcars)
spark_web(sc)
cars = copy_to(sc, mtcars)
dbGetQuery(sc, "SELECT COUNT(*) FROM mtcars")
library("DBI")
dbGetQuery(sc, "SELECT COUNT(*) FROM mtcars")
sc <- spark_connect(master="local[*]",
version = "3.5",
config = spark_config(),
spark_home = "/opt/homebrew/Cellar/apache-spark/3.5.1/libexec/")
cars = copy_to(sc, mtcars)
# sum
300.1 + 200.3 + 300.34
# square root
sqrt(256)
# log and trig methods
log10(100) * cos(pi)
# reverse cumulative sum
cumsum(rev(c(2, 3, 4, 5, 6)))
# ALPHABETS
LETTERS[19]
SIC MATH
# BASIC MATH
# sum
300.1 + 200.3 + 300.34
# square root
sqrt(256)
# log and trig methods
log10(100) * cos(pi)
# cumulative sum
cumsum(c(2, 3, 4, 5, 6))
# reverse cumulative sum
cumsum(rev(c(2, 3, 4, 5, 6)))
# last letter
letters[length(letters)]
# ALPHABETS
LETTERS[19]
letters[19]
# last letter
letters[length(letters)]
# BASIC MATH
# sum
300.1 + 200.3 + 300.34
# square root
sqrt(256)
# log and trig methods
log10(100) * cos(pi)
# cumulative sum
cumsum(c(2, 3, 4, 5, 6))
# reverse cumulative sum
cumsum(rev(c(2, 3, 4, 5, 6)))
# ALPHABETS
LETTERS[19]
letters[19]
# last letter
letters[length(letters)]
# READING DATASET
Titanic
head(Titanic)
# SIMPLE OBJECTS
x <- 10
y <- 20
z <- x + y
z
# VECTORS
myvec <- c(x, y, z)
max(myvec)
min(myvec)
length(myvec)
var(myvec)
rainfall_of_2020 <-c(0.1, 0.6, 0.8, 0.9, 0.1,
0.4, 0.5, 0.6, 0.9, 0.4,
0.4, 0.2)
mean(rainfall_of_2020)
sd(rainfall_of_2020)
cumsum(rainfall_of_2020)
which.max(rainfall_of_2020)
which.min(rainfall_of_2020)
x <- c(1, 2, 5, 9, 11)
y <- c(2, 5, 1, 0, 23)
intersect(x,y)
setdiff(x, y)
setdiff(y, x)
union(x, y)
c(x, y)
m <- matrix(runif(100), ncol = 10)
rowMeans(m)
sd(rowMeans(m))
m <-matrix(runif(100),ncol=10)
cm <-colMeans(m)
cm
hist(cm)
library(car)
# get help of density plot
?denstityplot
example(densityPlot)
install.packages("car")
library(car)
# get help of density plot
?densityplot
example(densityPlot)
install.packages("car")
# get help of density plot
??densityplot
# get help of density plot
?denstityplot
# get help of density plot
?denstityplot
# get help of density plot
?densityplot
# get help of density plot
??densityplot
# PACKAGES
install.packages("car")
library(car)
# get help of density plot
??densityplot
example(densityPlot)
str <- "Hello, Data Visualization!"
print(str)
# STRINGS
str <- "Hello, Data Visualization!"
print(str)
source("~/College Work/Year 3 Semester 2 (Sem 6)/Programming for Data Science Lab/Assignment 1/code.R")
# Load necessary libraries
library(dplyr)
# Load your dataset
# Specify the path to your text file
file_path <- "Contacts.csv"
# Read the lines from the text file
text_lines <- readLines()
df <- read.txt(file_path)
df <- read.csv(file_path)
# Load your dataset
# Specify the path to your text file
setwd("/Users/abhi/College Work/Year 3 Semester 2 (Sem 6)/Programming for Data Science Lab/Assignment 2/")
print(getwd())
file_path <- "Contacts.csv"
df <- read.csv(file_path)
# Check for missing values
missing_values <- sum(is.na(df))
cat("Number of missing values:", missing_values, "\n")
# Load your dataset
# Specify the path to your text file
setwd("/Users/abhi/College Work/Year 3 Semester 2 (Sem 6)/Programming for Data Science Lab/Assignment 2/")
print(getwd())
file_path <- "Connections.csv"
df <- read.csv(file_path)
df <- read.csv(file_path)
# Display a summary of the dataset
summary(df)
# Check for missing values
missing_values <- sum(is.na(df))
cat("Number of missing values:", missing_values, "\n")
# Handle missing values (replace with mean, median, or remove)
# Example: Replace missing values with the mean of the column
df <- df %>% mutate_if(is.numeric, funs(ifelse(is.na(.), mean(., na.rm = TRUE), .)))
# Remove duplicate rows
df <- distinct(df)
# Check for outliers and handle them if necessary
# Example: Remove outliers from a numeric column
outliers <- boxplot.stats(df$numeric_column)$out
df <- df %>% filter(!numeric_column %in% outliers)
file_path <- "Contacts.csv"
df <- read.csv(file_path)
# Displaying a summary of the dataset
summary(df)
# Check for missing values
missing_values <- sum(is.na(df))
cat("Number of missing values:", missing_values, "\n")
# Handle missing values (replace with mean, median, or remove)
# Example: Replace missing values with the mean of the column
df <- df %>% mutate_if(is.numeric, funs(ifelse(is.na(.), mean(., na.rm = TRUE), .)))
# Remove duplicate rows
df <- distinct(df)
# Handle missing values (replace with mean, median, or remove)
# Example: Replace missing values with the mean of the column
df <- df %>% mutate_if(is.numeric, ~ifelse(is.na(.), "empty", .))
# Remove duplicate rows
df <- distinct(df)
# Save the cleaned dataset to a new file
# Replace 'cleaned_dataset.csv' with your desired file name
write.csv(df, 'cleaned_dataset.txt', row.names = FALSE)
df
# Handle missing values (replace with mean, median, or remove)
# Example: Replace missing values with the mean of the column
df <- df %>% mutate_if(is.character, ~ifelse(is.na(.), "empty", .))
# Remove duplicate rows
df <- distinct(df)
# Save the cleaned dataset to a new file
# Replace 'cleaned_dataset.csv' with your desired file name
write.csv(df, 'cleaned_dataset.txt', row.names = FALSE)
df
# Load necessary libraries
library(dplyr)
setwd("/Users/abhi/College Work/Year 3 Semester 2 (Sem 6)/Programming for Data Science Lab/Assignment 2/")
print(getwd())
file_path <- "Contacts.csv"
df <- read.csv(file_path)
# Displaying a summary of the dataset
summary(df)
# Check for missing values
missing_values <- sum(is.na(df))
cat("Number of missing values:", missing_values, "\n")
# Handle missing values (replace with mean, median, or remove)
# Example: Replace missing values with the mean of the column
df <- df %>% mutate_if(is.character, ~ifelse(is.na(.), "empty", .))
# Remove duplicate rows
df <- distinct(df)
# Check for outliers and handle them if necessary
# Example: Remove outliers from a numeric column
# outliers <- boxplot.stats(df$numeric_column)$out
# df <- df %>% filter(!numeric_column %in% outliers)
# Save the cleaned dataset to a new file
# Replace 'cleaned_dataset.csv' with your desired file name
write.csv(df, 'cleaned_dataset.txt', row.names = FALSE)
head(df)
